/*
 * GRID
 * A layout that provides a flexible grid system.
 * Info: https://every-layout.dev/layouts/grid/
 * 
 * CUSTOM PROPERTIES AND CONFIGURATION
 * --grid-placement: Defines how many columns to create in the grid. Default is auto-fill.
 * --grid-min-item-size: Defines the minimum size of grid items. Default is 16rem.
 * --gutter: Defines the space between grid items. Default is var(--space-s-l).
 * 
 * A data attribute [data-layout="halves"] can be used to create a 50/50 split layout.
 * A data attribute [data-layout="thirds"] can be used to create a three column grid layout.
 * 
 * Example: 
    <ul class="l-grid">
      <li class="l-box u-flow">
        <h3>title</h3>
        <p>Lorem ipsum dolor sit amet.</p>
      </li>
      <li class="l-box u-flow">
        <h3>title</h3>
        <p>Lorem ipsum dolor sit amet.</p>
      </li>
      <li class="l-box u-flow">
        <h3>title</h3>
        <p>Lorem ipsum dolor sit amet.</p>
      </li>
    </ul>
 */

.l-grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(min(var(--grid-min-item-size, 16rem), 100%), 1fr)
  );
  gap: var(--grid-gap, var(--space-s-l));

  &[data-grid="halves"] {
    --grid-placement: auto-fit;
    --grid-min-item-size: clamp(16rem, 50vw, 33rem);
  }

  &[data-grid="thirds"] {
    --grid-placement: auto-fit;
    --grid-min-item-size: clamp(16rem, 33%, 20rem);
  }

  &[data-grid="subgrid"] > * {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span var(--subgrid-rows, 3);
    grid-column: span var(--subgrid-columns, 1);
    gap: var(--subgrid-gap, var(--space-s-m));
  }
}
