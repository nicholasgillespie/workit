/**
 * Function: select-and-merge-key-value-pairs
 * Transforms values in a SCSS map based on a provided key and key value.
 */
@function select-and-merge-key-value-pairs(
  $variable: null,
  $key: null,
  $keyValue: null,
  $isNested: false
) {
  @if $variable == null {
    @error "Variable is missing. Please provide a map when calling the function.";
  }
  @if $key == null {
    @error "Key is missing. Please provide a key when calling the function.";
  }
  @if $keyValue == null or $keyValue == false {
    @error "Key value is missing. Please provide a key value when calling the function.";
  }
  @if type-of($isNested) != bool {
    @error "`$isNested` should be a boolean (true or false). Please provide a boolean when calling the function.";
  }

  $new-variable: ();

  @if $isNested {
    @each $inner-map-key, $inner-map in $variable {
      @each $value in $inner-map {
        $new-variable: merge-key-value-pairs(
          $value,
          $key,
          $keyValue,
          $new-variable
        );
      }
    }
  } @else {
    @each $value in $variable {
      $new-variable: merge-key-value-pairs(
        $value,
        $key,
        $keyValue,
        $new-variable
      );
    }
  }

  @return $new-variable;
}

/**
 * Function: merge-key-value-pairs
 * Merges a key-value pair into an existing SCSS map.
 */
@function merge-key-value-pairs($value, $key, $keyValue, $new-variable) {
  $key-value: map-get($value, $key);
  $value-value: map-get($value, $keyValue);

  $new-variable: map-merge(
    $new-variable,
    (
      $key-value: $value-value,
    )
  );

  @return $new-variable;
}

/**
 * Function: trim
 * Removes leading and trailing spaces from a string.
 */
@function trim($string) {
  $first-char: str-slice($string, 1, 1);
  $last-char: str-slice($string, -1, -1);

  @if $first-char == " " {
    $string: str-slice($string, 2);
    @return trim($string);
  }

  @if $last-char == " " {
    $string: str-slice($string, 1, -2);
    @return trim($string);
  }

  @return $string;
}

/**
 * Function: kebab-case
 * Converts a string to kebab-case.
 */
@function kebab-case($string) {
  $string: trim($string);
  $string: to-lower-case($string);
  $index: str-index($string, " ");

  @if $index {
    @return str-slice($string, 1, $index - 1) + "-" +
      kebab-case(str-slice($string, $index + 1));
  }

  @return $string;
}

/**
 * Function: kebab-case-map
 * Converts keys and/or values in a SCSS map to kebab-case.
 */
@function kebab-case-map($map, $convert: "both") {
  $new-map: ();

  @each $key, $value in $map {
    @if $convert == "keys" or $convert == "both" {
      $key: kebab-case($key);
    }
    @if type-of($value) ==
      string and
      ($convert == "values" or $convert == "both")
    {
      $value: kebab-case($value);
    }
    $new-map: map-merge(
      $new-map,
      (
        $key: $value,
      )
    );
  }

  @return $new-map;
}
